from app.models.sessions import MRedisSession
from datetime import datetime, timezone
import app.config as cfg
import json

import logging
logger = logging.getLogger(__name__)

class SessionManager:
    def __init__(self, redis_client):
        self.redis = redis_client

    async def create_session(self, tg_client_id: str) -> MRedisSession:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ —Å–≤—è–∑–∞—Ç—å —Å Telegram-–∫–ª–∏–µ–Ω—Ç–æ–º"""
        session = MRedisSession(tg_client_id=tg_client_id)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        key = f"session:{session.id}"
        await self.redis.setex(
            key,
            cfg.REDIS_SESSION_TTL,
            session.model_dump_json()
        )

        # –ø–æ–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–Ω—è—Ç—ã–º
        await self.redis.set(f"client:{tg_client_id}:session", str(session.id))

        logger.debug(f"‚úÖ Created session for TG Client[{tg_client_id}] -> {session.id}")
        return session

    async def get_session(self, session_id: str) -> MRedisSession | None:
        """–î–æ—Å—Ç–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID"""
        data = await self.redis.get(f"session:{session_id}")
        if not data:
            return None
        
        data = json.loads(data)
        return MRedisSession.model_validate(data)

    async def get_sessions(self) -> list[MRedisSession]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        keys = await self.redis.keys("session:*")
        sessions = []
        for key in keys:
            raw = await self.redis.get(key)
            if raw:
                data = json.loads(raw)
                sessions.append(MRedisSession.model_validate(data))
        logger.debug(f"üìä Total sessions in Redis: {len(sessions)}")
        return sessions

    async def update_session_step(self, session_id: str, step: str) -> MRedisSession | None:
        """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏"""
        session = await self.get_session(session_id)
        if not session:
            return None
        session.step = step
        session.updated_at = datetime.now(timezone.utc)

        await self.redis.setex(
            f"session:{session.id}",
            cfg.REDIS_SESSION_TTL,
            session.model_dump_json()
        )
        return session

    async def free_client(self, tg_client_id: str):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.redis.delete(f"client:{tg_client_id}:session")
        logger.debug(f"üü¢ Client {tg_client_id} is now free")
